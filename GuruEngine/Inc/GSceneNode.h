/*
Author:		Dan Strycharske
Date:       08.09.12
File:       GSCeneNode.h
Brief:      The base node class for the scene graph
*/

#ifndef __GSCENENODE_H__
#define __GSCENENODE_H__


//////////////////////////////////////////////////////////////////////////
// Includes and defines.
//////////////////////////////////////////////////////////////////////////
#include <map> //using map for string->node pairs.
#include <string>
#include "Primitives.h"
#include "VQS.h"

//////////////////////////////////////////////////////////////////////////
// Forward declarations.
//////////////////////////////////////////////////////////////////////////
class Entity;
class vqs;
class CVector3;


using namespace std;

//////////////////////////////////////////////////////////////////////////
// Nodes that are used to place objects in the scene.  This can be placed
// in the sense of physically within the world, as all nodes have transforms.
// But this also can mean asset nodes, so that it has no use for the transform
// but allows logical grouping of objects by renderable properties to speed up
// rendering.  Batch caching, less texture and shader swaps.
//////////////////////////////////////////////////////////////////////////
class GSceneNode
{
//Scene nodes can only be constructed through a World, so the constructor is private.
private:
	GSceneNode();
	~GSceneNode();

protected:
	typedef std::map<string, GSceneNode*> ChildNodeMap;
	typedef std::map<string, Entity*> AttachedEntityMap;

protected:
	//////////////////////////////////////////////////////////////////////////
	// Global unique identifier.  unsigned long
	//////////////////////////////////////////////////////////////////////////
	unsigned long int mGuid;

	//////////////////////////////////////////////////////////////////////////
	// Pointer to the parent node of this node.
	//////////////////////////////////////////////////////////////////////////
	GSceneNode* mParent;

	//////////////////////////////////////////////////////////////////////////
	// The map of child nodes.
	//////////////////////////////////////////////////////////////////////////
	ChildNodeMap mChildNodes;

	//////////////////////////////////////////////////////////////////////////
	// The map of attached entities.
	//////////////////////////////////////////////////////////////////////////
	AttachedEntityMap mAttachedEntities;

	//////////////////////////////////////////////////////////////////////////
	// Bounding box for the node.  fits all attached entities aabb's.
	//////////////////////////////////////////////////////////////////////////
	AABB mBounds;

	//////////////////////////////////////////////////////////////////////////
	// The initial local transform for this node.  Represented as VQS.
	//////////////////////////////////////////////////////////////////////////
	vqs mInitialTransform;

	//////////////////////////////////////////////////////////////////////////
	// The current local transform, relative to the parent.
	//////////////////////////////////////////////////////////////////////////
	vqs mRelativeTransform;

	//////////////////////////////////////////////////////////////////////////
	// Cached final transform from root to this node.
	//////////////////////////////////////////////////////////////////////////
	vqs mCombinedTransform;

	//////////////////////////////////////////////////////////////////////////
	// Cached final transform as matrix.  has conversions to GL and DX matrices.
	//////////////////////////////////////////////////////////////////////////
	Matrix4 mCombinedMatrix;

	//////////////////////////////////////////////////////////////////////////
	// The name of this node.  For friendly human-readable access.
	//////////////////////////////////////////////////////////////////////////
	string mName;

	//////////////////////////////////////////////////////////////////////////
	// If this node needs an update from the parent.
	//////////////////////////////////////////////////////////////////////////
	bool mNeedParentUpdate;

	//////////////////////////////////////////////////////////////////////////
	// All children require updates; force update immediately.
	//////////////////////////////////////////////////////////////////////////
	bool updateAllChildren;

	//////////////////////////////////////////////////////////////////////////
	// A second node that this node can follow/track.
	//////////////////////////////////////////////////////////////////////////
	GSceneNode* mStepParent;

	//////////////////////////////////////////////////////////////////////////
	// An offset from the parent that is actually tracked.
	// By Default: Zero-vector, so step-parent base position is tracked.
	//////////////////////////////////////////////////////////////////////////
	CVector3 mTrackStepParentOffset;

	//////////////////////////////////////////////////////////////////////////
	// Defines a look vector to override default center-to-center look vector.
	//////////////////////////////////////////////////////////////////////////
	CVector3 mTrackStepParentLook;

	//////////////////////////////////////////////////////////////////////////
	// This node will be updated by the next frame.
	//////////////////////////////////////////////////////////////////////////
	bool updatePending;

	//////////////////////////////////////////////////////////////////////////
	// Marks the cached combined transform as needing to be updated, due to 
	// this node updating, or parent/step-parent updating.
	//////////////////////////////////////////////////////////////////////////
	bool mDirtyCachedXform;

	//////////////////////////////////////////////////////////////////////////
	// Makes this node and all attached entities visible.  Affects all child
	// nodes and their entities.  Entities must set 'mOverrideNodeVisibility'
	//////////////////////////////////////////////////////////////////////////
	bool mVisible;
};


#endif
