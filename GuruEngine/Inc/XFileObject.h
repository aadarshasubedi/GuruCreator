#ifndef XFILEOBJECT_H
#define XFILEOBJECT_H
/*
Author:	Dan Strycharske
Project: Inner Knight
Team:	Macrohard
DigiPen Institute of Technology owns this and our souls.

File:	XFileObject.h
brief:	This class is going to hold all of our relevant data from the .x file generated by 3ds max.
		Animation controllers, number of bones, matrices, frames, mesh containers, etc.  Maintains
		the mesh hierarchy and has all animation info.

*/

#include "Structs.h"
#include "PathingClasses.h"
#include "CAnimationController.h"

#ifdef DIRECTX
struct EXTENDED_D3DXMESHCONTAINER;
struct EXTENDED_D3DXFRAME;
#endif

class CXFileObject 
{
public:	
	//constructor 
	CXFileObject();
	CXFileObject( const CXFileObject& object );
	//destructor
	~CXFileObject();

#ifdef DIRECTX
	CXFileObject( LPDIRECT3DDEVICE9 device, char* filename );
	//Need to load the x file
	HRESULT LoadXFileIn( LPDIRECT3DDEVICE9 device);

	//render
	void Render( LPDIRECT3DDEVICE9 device, LPD3DXEFFECT effect = NULL );
#endif

	//Accessors for the various member variables.
	GuruFrame* Frame()				{ return mFrame; }
	Extra_Mesh*	Mesh()				{ return mMeshFirst; }
	//DrawablePointList*	Skeleton()	{ return &mRenderableSkeleton; }

	//This gets the index xobject, if it exists, and returns if it's drawing the bones or not.
	bool	GetBoneDrawing( unsigned index );
	void	ToggleBoneDrawing( )	{ mbDrawSkeleton = !mbDrawSkeleton; }

	bool	GetMeshDrawing( unsigned index );
	void	ToggleMeshDrawing(  )	{ mbDrawMesh = !mbDrawMesh; }

	void	ToggleWireframe()		{ mWireframeMode = !mWireframeMode; }

	//Allows access to the animation controller.
	CAnimationController*	GetAnimController()	{ return &mAnimationController; }

private:	
	//objects filename it comes from.
	char		mFilename[MAX_FILENAME_SIZE];

	//animation controller and frame pointer
	GuruFrame*					mFrame;

	//now my animation controller
	CAnimationController		mAnimationController;

	//Bone matrices and maxn umber of them
	//@TODO: These will be the converted vqs data at the end which will
	//			be applied to the mesh when i get around to rendering it.
	Matrix4						mBoneMats[MAX_NUM_BONES];
	UINT						mNumBones;

	//Extended mesh container with updated matrix info
	Extra_Mesh					*mMeshFirst;

	//My point list class for drawing the skeleton	
	//DrawablePointList			mRenderableSkeleton;

	//Determines whether or not the skeleton will be drawn
	bool						mbDrawSkeleton;

	//whether the mesh gets drawn or not.
	bool						mbDrawMesh;

	//whether to draw the mesh as wireframe or solid.
	bool						mWireframeMode;
};

#endif
