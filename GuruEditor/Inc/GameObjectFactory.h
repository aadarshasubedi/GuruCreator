/*
Author:		Dan Strycharske
Date:		09.05.09
File:		GameObjectFactory.h
Brief:		Factory for creating, maintaining, and deleting GameObjects.
*/

#ifndef GAMEOBJECTFACTORY_H
#define GAMEOBJECTFACTORY_H


/************************************************************************/
/* Includes
/************************************************************************/
#include <stdlib.h>
#include <map>
#include "GameObject.h"


class GameObjectDescriptor;
class ComponentFactory;


typedef std::pair<unsigned int, GameObjectPtr > GameObjectEntry;
/************************************************************************/
/* GameObjectFactory
/* 
/* This class is responsbile for generating new game objects and helping
/* manage their lifetime.  Since using shared_ptr, then this is generally not
/* a problem, but there are times when we want to force delete an object before
/* its ref count has gone to zero, so we need to make sure that is handled 
/* correctly.
/************************************************************************/
class GameObjectFactory
{
public:
	/************************************************************************/
	/* Constructors/Destructor
	/************************************************************************/
	GameObjectFactory();
	virtual ~GameObjectFactory();

	/************************************************************************/
	/* Factory workhorse function; generates the objects given descriptor classes.
	/************************************************************************/
	GameObject* CreateGameObject(GameObjectDescriptor description);
	//std::shared_ptr<GameObject> CreateGameObject(const GameObjectDescriptor& description);
	bool DeleteGameObject(GameObjectPtr obj);

	ComponentFactory* componentFactory() { return mComponentFactory; }

	/*************************************************************************
	 Should be called anytime you want the game object after CreateGameObject has been called.
	*************************************************************************/
	GameObjectPtr GetLastObjectCreated() const;
		
	/************************************************************************/
	/* All of the game objects, hashed by their global uid.
	/************************************************************************/
	std::map< unsigned int, GameObjectPtr > mObjects;

private:
	/************************************************************************/
	/* The factory responsible for generating all components for any objects
	/* generated by this factory.
	/************************************************************************/
	ComponentFactory* mComponentFactory;
};


#endif


